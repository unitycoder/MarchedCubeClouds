#pragma kernel PointValues
#pragma kernel PointNormals
#pragma kernel MarchCubes
#pragma kernel SingleValue
#include "/Includes/Noise.compute"
#include "/Includes/TriangulationTable.compute"
#include "/Includes/Rays.compute"

static const int numThreads = 8;

// Noise settings
int pointsPerAxis;
float chunkSize;
float3 chunkSection;

int octaves;
float noiseScale;
float3 noiseTimeOffsets;
float cloudsGradFloor;
float cloudsGradCeil;
float cutoffGradFloor;
float cutoffGradCeil;

float surfaceLevel;

float timePassed;

RWStructuredBuffer<float4> pointValues;

RWStructuredBuffer<float3> pointNormals;

struct Triangle
{
    float3 vertex2;
    float3 vertex1;
    float3 vertex0;
    float3 normal2;
    float3 normal1;
    float3 normal0;
    float3 color2;
    float3 color1;
    float3 color0;
};
struct CubeVert
{
    float4 vert;
    float3 normal;
};

float ambientOcclusionDistance;
AppendStructuredBuffer<Triangle> triangles;

float3 singleValuePosition;
AppendStructuredBuffer<float> singleValue;


float CalcNoise(float3 noisePos, float scale, int oct) 
{
    return Fbm(noisePos * scale, oct);
}

float Remap(float in1, float in2, float out1, float out2, float inputVal)
{
    float inRange = in2 - in1;
    float normalizedValue = (inputVal - in1) / inRange;
    float outRange = out2 - out1;
    return out1 + (normalizedValue * outRange);
}

float Gradient(float3 pointPosition, float gradFloor, float gradCeil, float min, float max)
{
    return clamp(lerp(min, max, Remap(gradFloor, gradCeil, 0, 1, pointPosition.y)), min, max);
}

float PositionFromLevel(int axisLevel, float axisPos) 
{
    return ((axisLevel - 1) * (chunkSize / (pointsPerAxis - 3))) + (axisPos - (.5f * chunkSize));
}

int PointIndex(int x, int y, int z)
{
    return (pointsPerAxis * pointsPerAxis * y) + (pointsPerAxis * z) + x;
}

float DensityMap(float3 currentPosition, float3 offsets)
{
    float3 noisePosition = float3(currentPosition.x + timePassed * offsets.x, currentPosition.y + timePassed * offsets.y, currentPosition.z + timePassed * offsets.z);
    float densityValue;
    densityValue = CalcNoise(noisePosition, noiseScale, octaves);
    //densityValue /= 2;
    densityValue = abs(Remap(0, 1, -1, 1, densityValue));
    //densityValue = abs(densityValue);

    //densityValue = ((Gradient(currentPosition, cloudsGradFloor, cloudsGradCeil, 0, 1)) * calcNoise(noisePosition, noiseScale / 4, 1));
    densityValue *= ((Gradient(currentPosition, cloudsGradFloor, cloudsGradCeil, 0, 1)) * CalcNoise(noisePosition, noiseScale / 4, 1));
    densityValue += (Gradient(currentPosition, cutoffGradFloor, cutoffGradCeil, 0, 1));
    densityValue = clamp(densityValue, -1, 1);

    return densityValue;
}

[numthreads(numThreads, numThreads, numThreads)]
void PointValues(int3 id : SV_DispatchThreadID)
{
    if (id.x >= pointsPerAxis || id.y >= pointsPerAxis || id.z >= pointsPerAxis) 
    {
        return;
    }

    float xPos = PositionFromLevel(id.x, chunkSection.x);
    float yPos = PositionFromLevel(id.y, chunkSection.y);
    float zPos = PositionFromLevel(id.z, chunkSection.z);
    float3 currentPosition = float3(xPos, yPos, zPos);

    float pointDisplacement = DensityMap(currentPosition, noiseTimeOffsets);

    pointValues[PointIndex(id.x, id.y, id.z)] = float4(xPos, yPos, zPos, pointDisplacement);
}


float3 PointNormal(int x, int y, int z)
{
    float normX = (pointValues[PointIndex(x + 1, y, z)].w - pointValues[PointIndex(x - 1, y, z)].w) / 2;
    float normY = (pointValues[PointIndex(x, y + 1, z)].w - pointValues[PointIndex(x, y - 1, z)].w) / 2;
    float normZ = (pointValues[PointIndex(x, y, z + 1)].w - pointValues[PointIndex(x, y, z - 1)].w) / 2;
    return normalize(float3(-normX, -normY, -normZ));
}

[numthreads(numThreads, numThreads, numThreads)]
void PointNormals(int3 id : SV_DispatchThreadID) 
{
    if (id.x >= pointsPerAxis || id.y >= pointsPerAxis || id.z >= pointsPerAxis)
    {
        return;
    }

    pointNormals[PointIndex(id.x, id.y, id.z)] = PointNormal(id.x, id.y, id.z);
}


float3 InterpolateVerts(float4 v1, float4 v2)
{
    float t = (surfaceLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

float3 Slerp(float3 start, float3 end, float percent)
{
    // Dot product - the cosine of the angle between 2 vectors.
    float dotP = dot(start, end);
    // Clamp it to be in the range of Acos()
    // This may be unnecessary, but floating point
    // precision can be a fickle mistress.
    dotP = clamp(dotP, -1.0f, 1.0f);
    // Acos(dot) returns the angle between start and end,
    // And multiplying that by percent returns the angle between
    // start and the final result.
    float theta = acos(dotP) * percent;
    float3 RelativeVec = normalize(end - start * dotP);
    // Orthonormal basis
    // The final result.
    return ((start * cos(theta)) + (RelativeVec * sin(theta)));
}

float3 InterpolateNorms(CubeVert cubeA, CubeVert cubeB)
{
    float t = (surfaceLevel - cubeA.vert.w) / (cubeB.vert.w - cubeA.vert.w);

    return Slerp(cubeA.normal, cubeB.normal, t);
}

float Thickness(float3 pointPosition)
{
    float total = 0;
    for (int i = 0; i < 32; i++) 
    {
        bool blocked = false;
        for (int j = 0; j < 4; j++)
        {
            float3 checkPosition = pointPosition + ((float3(rays[(i * 3)], rays[(i * 3) + 1], rays[(i * 3) + 2])) * ((ambientOcclusionDistance / 4) * (j + 1)));
            if (DensityMap(checkPosition, noiseTimeOffsets) < surfaceLevel)
            {
                blocked = true;
                break;
            }

        }
        if (blocked == true) {
            total += 1;
        }
    }
    return total / (float)32;
}

float AmbientOcclusion(float3 pointPosition)
{
    float total = 0;
    for (int i = 0; i < 32; i++)
    {
        bool blocked = false;
        for (int j = 0; j < 4; j++)
        {
            float3 checkPosition = pointPosition + ((float3(rays[(i * 3)], rays[(i * 3) + 1], rays[(i * 3) + 2])) * ((ambientOcclusionDistance / 4) * (j + 1)));
            if (DensityMap(checkPosition, noiseTimeOffsets) > surfaceLevel)
            {
                blocked = true;
                break;
            }
        }
        if (blocked == true) {
            total += 1;
        }
    }
    return 1 - (total / (float)32);
}

[numthreads(numThreads, numThreads, numThreads)]
void MarchCubes(int3 id : SV_DispatchThreadID)
{
    // Stop two before the end because voxel includes neighbouring points
    // and there is an extra voxel for normal calculation
    if ((id.x >= pointsPerAxis - 2 || id.y >= pointsPerAxis - 2 || id.z >= pointsPerAxis - 2) || (id.x < 1 || id.y < 1 || id.z < 1))
    {
        return;
    }

    // 8 corners of the current cube
    CubeVert cubeVerts[8];
    cubeVerts[0].vert = pointValues[PointIndex(id.x, id.y, id.z)];
    cubeVerts[1].vert = pointValues[PointIndex(id.x + 1, id.y, id.z)];
    cubeVerts[2].vert = pointValues[PointIndex(id.x + 1, id.y, id.z + 1)];
    cubeVerts[3].vert = pointValues[PointIndex(id.x, id.y, id.z + 1)];
    cubeVerts[4].vert = pointValues[PointIndex(id.x, id.y + 1, id.z)];
    cubeVerts[5].vert = pointValues[PointIndex(id.x + 1, id.y + 1, id.z)];
    cubeVerts[6].vert = pointValues[PointIndex(id.x + 1, id.y + 1, id.z + 1)];
    cubeVerts[7].vert = pointValues[PointIndex(id.x, id.y + 1, id.z + 1)];
    cubeVerts[0].normal = pointNormals[PointIndex(id.x, id.y, id.z)];
    cubeVerts[1].normal = pointNormals[PointIndex(id.x + 1, id.y, id.z)];
    cubeVerts[2].normal = pointNormals[PointIndex(id.x + 1, id.y, id.z + 1)];
    cubeVerts[3].normal = pointNormals[PointIndex(id.x, id.y, id.z + 1)];
    cubeVerts[4].normal = pointNormals[PointIndex(id.x, id.y + 1, id.z)];
    cubeVerts[5].normal = pointNormals[PointIndex(id.x + 1, id.y + 1, id.z)];
    cubeVerts[6].normal = pointNormals[PointIndex(id.x + 1, id.y + 1, id.z + 1)];
    cubeVerts[7].normal = pointNormals[PointIndex(id.x, id.y + 1, id.z + 1)];

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeVerts[0].vert.w < surfaceLevel) cubeIndex |= 1;
    if (cubeVerts[1].vert.w < surfaceLevel) cubeIndex |= 2;
    if (cubeVerts[2].vert.w < surfaceLevel) cubeIndex |= 4;
    if (cubeVerts[3].vert.w < surfaceLevel) cubeIndex |= 8;
    if (cubeVerts[4].vert.w < surfaceLevel) cubeIndex |= 16; 
    if (cubeVerts[5].vert.w < surfaceLevel) cubeIndex |= 32;
    if (cubeVerts[6].vert.w < surfaceLevel) cubeIndex |= 64;
    if (cubeVerts[7].vert.w < surfaceLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int indexA0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int indexB0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int indexA1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int indexB1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int indexA2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int indexB2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertex0 = InterpolateVerts(cubeVerts[indexA0].vert, cubeVerts[indexB0].vert);
        tri.vertex1 = InterpolateVerts(cubeVerts[indexA1].vert, cubeVerts[indexB1].vert);
        tri.vertex2 = InterpolateVerts(cubeVerts[indexA2].vert, cubeVerts[indexB2].vert);

        tri.normal0 = InterpolateNorms(cubeVerts[indexA0], cubeVerts[indexB0]);
        tri.normal1 = InterpolateNorms(cubeVerts[indexA1], cubeVerts[indexB1]);
        tri.normal2 = InterpolateNorms(cubeVerts[indexA2], cubeVerts[indexB2]);

        //tri color x is ambient occlusion
        //tri color y is thickness
        tri.color0.x = AmbientOcclusion(tri.vertex0);
        tri.color1.x = AmbientOcclusion(tri.vertex1);
        tri.color2.x = AmbientOcclusion(tri.vertex2);

        tri.color0.y = Thickness(tri.vertex0);
        tri.color1.y = Thickness(tri.vertex1);
        tri.color2.y = Thickness(tri.vertex2);

        tri.color0.z = 0;
        tri.color1.z = 0;
        tri.color2.z = 0;

        triangles.Append(tri);
    }
}


[numthreads(numThreads, numThreads, numThreads)]
void SingleValue(int3 id : SV_DispatchThreadID) 
{
    singleValue.Append(DensityMap(singleValuePosition, noiseTimeOffsets));
}